goog.provide("ngmaterial.components.dialog");goog.require("ngmaterial.components.backdrop");goog.require("ngmaterial.core");MdDialogDirective.$inject=["$$rAF","$mdTheming","$mdDialog"];MdDialogProvider.$inject=["$$interimElementProvider"];angular.module("material.components.dialog",["material.core","material.components.backdrop"]).directive("mdDialog",MdDialogDirective).provider("$mdDialog",MdDialogProvider);function MdDialogDirective($$rAF,$mdTheming,$mdDialog){return{restrict:"E",link:function(scope,element){element.addClass("_md");$mdTheming(element);$$rAF(function(){var images;var content=element[0].querySelector("md-dialog-content");if(content){images=content.getElementsByTagName("img");addOverflowClass();angular.element(images).on("load",addOverflowClass)}scope.$on("$destroy",function(){$mdDialog.destroy(element)});function addOverflowClass(){element.toggleClass("md-content-overflow",content.scrollHeight>content.clientHeight)}})}}}function MdDialogProvider($$interimElementProvider){advancedDialogOptions.$inject=["$mdDialog","$mdConstant"];dialogDefaultOptions.$inject=["$mdDialog","$mdAria","$mdUtil","$mdConstant","$animate","$document","$window","$rootElement","$log","$injector","$mdTheming"];var topFocusTrap,bottomFocusTrap;return $$interimElementProvider("$mdDialog").setDefaults({methods:["disableParentScroll","hasBackdrop","clickOutsideToClose","escapeToClose","targetEvent","closeTo","openFrom","parent","fullscreen","contentElement"],options:dialogDefaultOptions}).addPreset("alert",{methods:["title","htmlContent","textContent","content","ariaLabel","ok","theme","css"],options:advancedDialogOptions}).addPreset("confirm",{methods:["title","htmlContent","textContent","content","ariaLabel","ok","cancel","theme","css"],options:advancedDialogOptions}).addPreset("prompt",{methods:["title","htmlContent","textContent","initialValue","content","placeholder","ariaLabel","ok","cancel","theme","css"],options:advancedDialogOptions});function advancedDialogOptions($mdDialog,$mdConstant){return{template:['<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" ng-class="dialog.css">','  <md-dialog-content class="md-dialog-content" role="document" tabIndex="-1">','    <h2 class="md-title">{{ dialog.title }}</h2>','    <div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body" ','        ng-bind-html="::dialog.mdHtmlContent"></div>','    <div ng-if="::!dialog.mdHtmlContent" class="md-dialog-content-body">',"      <p>{{::dialog.mdTextContent}}</p>","    </div>",'    <md-input-container md-no-float ng-if="::dialog.$type == \'prompt\'" class="md-prompt-input-container">','      <input ng-keypress="dialog.keypress($event)" md-autofocus ng-model="dialog.result" '+'             placeholder="{{::dialog.placeholder}}">',"    </md-input-container>","  </md-dialog-content>","  <md-dialog-actions>","    <md-button ng-if=\"dialog.$type === 'confirm' || dialog.$type === 'prompt'\""+'               ng-click="dialog.abort()" class="md-primary md-cancel-button">',"      {{ dialog.cancel }}","    </md-button>",'    <md-button ng-click="dialog.hide()" class="md-primary md-confirm-button" md-autofocus="dialog.$type===\'alert\'">',"      {{ dialog.ok }}","    </md-button>","  </md-dialog-actions>","</md-dialog>"].join("").replace(/\s\s+/g,""),controller:function mdDialogCtrl(){var isPrompt=this.$type=="prompt";if(isPrompt&&this.initialValue){this.result=this.initialValue}this.hide=function(){$mdDialog.hide(isPrompt?this.result:true)};this.abort=function(){$mdDialog.cancel()};this.keypress=function($event){if($event.keyCode===$mdConstant.KEY_CODE.ENTER){$mdDialog.hide(this.result)}}},controllerAs:"dialog",bindToController:true}}function dialogDefaultOptions($mdDialog,$mdAria,$mdUtil,$mdConstant,$animate,$document,$window,$rootElement,$log,$injector,$mdTheming){return{hasBackdrop:true,isolateScope:true,onCompiling:beforeCompile,onShow:onShow,onShowing:beforeShow,onRemove:onRemove,clickOutsideToClose:false,escapeToClose:true,targetEvent:null,contentElement:null,closeTo:null,openFrom:null,focusOnOpen:true,disableParentScroll:true,autoWrap:true,fullscreen:false,transformTemplate:function(template,options){return'<div class="md-dialog-container" tabindex="-1">'+validatedTemplate(template)+"</div>";function validatedTemplate(template){if(options.autoWrap&&!/<\/md-dialog>/g.test(template)){return"<md-dialog>"+(template||"")+"</md-dialog>"}else{return template||""}}}};function beforeCompile(options){detectTheming(options);if(options.contentElement){options.restoreContentElement=installContentElement(options)}}function beforeShow(scope,element,options,controller){if(controller){controller.mdHtmlContent=controller.htmlContent||options.htmlContent||"";controller.mdTextContent=controller.textContent||options.textContent||controller.content||options.content||"";if(controller.mdHtmlContent&&!$injector.has("$sanitize")){throw Error("The ngSanitize module must be loaded in order to use htmlContent.")}if(controller.mdHtmlContent&&controller.mdTextContent){throw Error("md-dialog cannot have both `htmlContent` and `textContent`")}}}function onShow(scope,element,options,controller){angular.element($document[0].body).addClass("md-dialog-is-showing");var dialogElement=element.find("md-dialog");if(dialogElement.hasClass("ng-cloak")){var message="$mdDialog: using `<md-dialog ng-cloak >` will affect the dialog opening animations.";$log.warn(message,element[0])}captureParentAndFromToElements(options);configureAria(dialogElement,options);showBackdrop(scope,element,options);activateListeners(element,options);return dialogPopIn(element,options).then(function(){lockScreenReader(element,options);warnDeprecatedActions();focusOnOpen()});function warnDeprecatedActions(){if(element[0].querySelector(".md-actions")){$log.warn("Using a class of md-actions is deprecated, please use <md-dialog-actions>.")}}function focusOnOpen(){if(options.focusOnOpen){var target=$mdUtil.findFocusTarget(element)||findCloseButton()||dialogElement;target.focus()}function findCloseButton(){var closeButton=element[0].querySelector(".dialog-close");if(!closeButton){var actionButtons=element[0].querySelectorAll(".md-actions button, md-dialog-actions button");closeButton=actionButtons[actionButtons.length-1]}return closeButton}}}function onRemove(scope,element,options){options.deactivateListeners();options.unlockScreenReader();options.hideBackdrop(options.$destroy);if(topFocusTrap&&topFocusTrap.parentNode){topFocusTrap.parentNode.removeChild(topFocusTrap)}if(bottomFocusTrap&&bottomFocusTrap.parentNode){bottomFocusTrap.parentNode.removeChild(bottomFocusTrap)}return!!options.$destroy?detachAndClean():animateRemoval().then(detachAndClean);function animateRemoval(){return dialogPopOut(element,options)}function detachAndClean(){angular.element($document[0].body).removeClass("md-dialog-is-showing");if(!options.contentElement){element.remove()}else{options.reverseContainerStretch();options.restoreContentElement()}if(!options.$destroy)options.origin.focus()}}function detectTheming(options){if(options.theme)return;options.theme=$mdTheming.defaultTheme();if(options.targetEvent&&options.targetEvent.target){var targetEl=angular.element(options.targetEvent.target);options.theme=(targetEl.controller("mdTheme")||{}).$mdTheme||options.theme}}function installContentElement(options){var contentEl=options.contentElement;var restoreFn=null;if(angular.isString(contentEl)){contentEl=document.querySelector(contentEl);restoreFn=createRestoreFn(contentEl)}else{contentEl=contentEl[0]||contentEl;if(document.contains(contentEl)){restoreFn=createRestoreFn(contentEl)}else{restoreFn=function(){contentEl.parentNode.removeChild(contentEl)}}}options.element=angular.element(contentEl);options.skipCompile=true;return restoreFn;function createRestoreFn(element){var parent=element.parentNode;var nextSibling=element.nextElementSibling;return function(){if(!nextSibling){parent.appendChild(element)}else{parent.insertBefore(element,nextSibling)}}}}function captureParentAndFromToElements(options){options.origin=angular.extend({element:null,bounds:null,focus:angular.noop},options.origin||{});options.parent=getDomElement(options.parent,$rootElement);options.closeTo=getBoundingClientRect(getDomElement(options.closeTo));options.openFrom=getBoundingClientRect(getDomElement(options.openFrom));if(options.targetEvent){options.origin=getBoundingClientRect(options.targetEvent.target,options.origin)}function getBoundingClientRect(element,orig){var source=angular.element(element||{});if(source&&source.length){var bounds={top:0,left:0,height:0,width:0};var hasFn=angular.isFunction(source[0].getBoundingClientRect);return angular.extend(orig||{},{element:hasFn?source:undefined,bounds:hasFn?source[0].getBoundingClientRect():angular.extend({},bounds,source[0]),focus:angular.bind(source,source.focus)})}}function getDomElement(element,defaultElement){if(angular.isString(element)){element=$document[0].querySelector(element)}return angular.element(element||defaultElement)}}function activateListeners(element,options){var window=angular.element($window);var onWindowResize=$mdUtil.debounce(function(){stretchDialogContainerToViewport(element,options)},60);var removeListeners=[];var smartClose=function(){var closeFn=options.$type=="alert"?$mdDialog.hide:$mdDialog.cancel;$mdUtil.nextTick(closeFn,true)};if(options.escapeToClose){var parentTarget=options.parent;var keyHandlerFn=function(ev){if(ev.keyCode===$mdConstant.KEY_CODE.ESCAPE){ev.stopPropagation();ev.preventDefault();smartClose()}};element.on("keydown",keyHandlerFn);parentTarget.on("keydown",keyHandlerFn);removeListeners.push(function(){element.off("keydown",keyHandlerFn);parentTarget.off("keydown",keyHandlerFn)})}window.on("resize",onWindowResize);removeListeners.push(function(){window.off("resize",onWindowResize)});if(options.clickOutsideToClose){var target=element;var sourceElem;var mousedownHandler=function(ev){sourceElem=ev.target};var mouseupHandler=function(ev){if(sourceElem===target[0]&&ev.target===target[0]){ev.stopPropagation();ev.preventDefault();smartClose()}};target.on("mousedown",mousedownHandler);target.on("mouseup",mouseupHandler);removeListeners.push(function(){target.off("mousedown",mousedownHandler);target.off("mouseup",mouseupHandler)})}options.deactivateListeners=function(){removeListeners.forEach(function(removeFn){removeFn()});options.deactivateListeners=null}}function showBackdrop(scope,element,options){if(options.disableParentScroll){options.restoreScroll=$mdUtil.disableScrollAround(element,options.parent)}if(options.hasBackdrop){options.backdrop=$mdUtil.createBackdrop(scope,"md-dialog-backdrop md-opaque");$animate.enter(options.backdrop,options.parent)}options.hideBackdrop=function hideBackdrop($destroy){if(options.backdrop){if(!!$destroy)options.backdrop.remove();else $animate.leave(options.backdrop)}if(options.disableParentScroll){options.restoreScroll();delete options.restoreScroll}options.hideBackdrop=null}}function configureAria(element,options){var role=options.$type==="alert"?"alertdialog":"dialog";var dialogContent=element.find("md-dialog-content");var existingDialogId=element.attr("id");var dialogContentId="dialogContent_"+(existingDialogId||$mdUtil.nextUid());element.attr({role:role,tabIndex:"-1"});if(dialogContent.length===0){dialogContent=element;if(existingDialogId){dialogContentId=existingDialogId}}dialogContent.attr("id",dialogContentId);element.attr("aria-describedby",dialogContentId);if(options.ariaLabel){$mdAria.expect(element,"aria-label",options.ariaLabel)}else{$mdAria.expectAsync(element,"aria-label",function(){var words=dialogContent.text().split(/\s+/);if(words.length>3)words=words.slice(0,3).concat("...");return words.join(" ")})}topFocusTrap=document.createElement("div");topFocusTrap.classList.add("md-dialog-focus-trap");topFocusTrap.tabIndex=0;bottomFocusTrap=topFocusTrap.cloneNode(false);var focusHandler=function(){element.focus()};topFocusTrap.addEventListener("focus",focusHandler);bottomFocusTrap.addEventListener("focus",focusHandler);element[0].parentNode.insertBefore(topFocusTrap,element[0]);element.after(bottomFocusTrap)}function lockScreenReader(element,options){var isHidden=true;walkDOM(element[0]);options.unlockScreenReader=function(){isHidden=false;walkDOM(element[0]);options.unlockScreenReader=null};function walkDOM(element){while(element.parentNode){if(element===document.body){return}var children=element.parentNode.children;for(var i=0;i<children.length;i++){if(element!==children[i]&&!isNodeOneOf(children[i],["SCRIPT","STYLE"])){children[i].setAttribute("aria-hidden",isHidden)}}walkDOM(element=element.parentNode)}}}function stretchDialogContainerToViewport(container,options){var isFixed=$window.getComputedStyle($document[0].body).position=="fixed";var backdrop=options.backdrop?$window.getComputedStyle(options.backdrop[0]):null;var height=backdrop?Math.min($document[0].body.clientHeight,Math.ceil(Math.abs(parseInt(backdrop.height,10)))):0;var previousStyles={top:container.css("top"),height:container.css("height")};container.css({top:(isFixed?$mdUtil.scrollTop(options.parent):0)+"px",height:height?height+"px":"100%"});return function(){container.css(previousStyles)}}function dialogPopIn(container,options){options.parent.append(container);options.reverseContainerStretch=stretchDialogContainerToViewport(container,options);var dialogEl=container.find("md-dialog");var animator=$mdUtil.dom.animator;var buildTranslateToOrigin=animator.calculateZoomToOrigin;var translateOptions={transitionInClass:"md-transition-in",transitionOutClass:"md-transition-out"};var from=animator.toTransformCss(buildTranslateToOrigin(dialogEl,options.openFrom||options.origin));var to=animator.toTransformCss("");dialogEl.toggleClass("md-dialog-fullscreen",!!options.fullscreen);return animator.translate3d(dialogEl,from,to,translateOptions).then(function(animateReversal){options.reverseAnimate=function(){delete options.reverseAnimate;if(options.closeTo){translateOptions={transitionInClass:"md-transition-out",transitionOutClass:"md-transition-in"};from=to;to=animator.toTransformCss(buildTranslateToOrigin(dialogEl,options.closeTo));return animator.translate3d(dialogEl,from,to,translateOptions)}return animateReversal(to=animator.toTransformCss(buildTranslateToOrigin(dialogEl,options.origin)))};options.clearAnimate=function(){delete options.clearAnimate;dialogEl.removeClass([translateOptions.transitionOutClass,translateOptions.transitionInClass].join(" "));return animator.translate3d(dialogEl,to,animator.toTransformCss(""),{})};return true})}function dialogPopOut(container,options){return options.reverseAnimate().then(function(){if(options.contentElement){options.clearAnimate()}})}function isNodeOneOf(elem,nodeTypeArray){if(nodeTypeArray.indexOf(elem.nodeName)!==-1){return true}}}}ngmaterial.components.dialog=angular.module("material.components.dialog");