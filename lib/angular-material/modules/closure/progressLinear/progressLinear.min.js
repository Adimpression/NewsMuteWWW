goog.provide("ngmaterial.components.progressLinear");goog.require("ngmaterial.core");MdProgressLinearDirective.$inject=["$mdTheming","$mdUtil","$log"];angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",MdProgressLinearDirective);function MdProgressLinearDirective($mdTheming,$mdUtil,$log){var MODE_DETERMINATE="determinate";var MODE_INDETERMINATE="indeterminate";var MODE_BUFFER="buffer";var MODE_QUERY="query";var DISABLED_CLASS="_md-progress-linear-disabled";return{restrict:"E",template:'<div class="md-container">'+'<div class="md-dashed"></div>'+'<div class="md-bar md-bar1"></div>'+'<div class="md-bar md-bar2"></div>'+"</div>",compile:compile};function compile(tElement,tAttrs,transclude){tElement.attr("aria-valuemin",0);tElement.attr("aria-valuemax",100);tElement.attr("role","progressbar");return postLink}function postLink(scope,element,attr){$mdTheming(element);var lastMode;var isDisabled=attr.hasOwnProperty("disabled");var toVendorCSS=$mdUtil.dom.animator.toCss;var bar1=angular.element(element[0].querySelector(".md-bar1"));var bar2=angular.element(element[0].querySelector(".md-bar2"));var container=angular.element(element[0].querySelector(".md-container"));element.attr("md-mode",mode()).toggleClass(DISABLED_CLASS,isDisabled);validateMode();watchAttributes();function watchAttributes(){attr.$observe("value",function(value){var percentValue=clamp(value);element.attr("aria-valuenow",percentValue);if(mode()!=MODE_QUERY)animateIndicator(bar2,percentValue)});attr.$observe("mdBufferValue",function(value){animateIndicator(bar1,clamp(value))});attr.$observe("disabled",function(value){if(value===true||value===false){isDisabled=!!value}else{isDisabled=angular.isDefined(value)}element.toggleClass(DISABLED_CLASS,isDisabled);container.toggleClass(lastMode,!isDisabled)});attr.$observe("mdMode",function(mode){if(lastMode)container.removeClass(lastMode);switch(mode){case MODE_QUERY:case MODE_BUFFER:case MODE_DETERMINATE:case MODE_INDETERMINATE:container.addClass(lastMode="md-mode-"+mode);break;default:container.addClass(lastMode="md-mode-"+MODE_INDETERMINATE);break}})}function validateMode(){if(angular.isUndefined(attr.mdMode)){var hasValue=angular.isDefined(attr.value);var mode=hasValue?MODE_DETERMINATE:MODE_INDETERMINATE;var info="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";element.attr("md-mode",mode);attr.mdMode=mode}}function mode(){var value=(attr.mdMode||"").trim();if(value){switch(value){case MODE_DETERMINATE:case MODE_INDETERMINATE:case MODE_BUFFER:case MODE_QUERY:break;default:value=MODE_INDETERMINATE;break}}return value}function animateIndicator(target,value){if(isDisabled||!mode())return;var to=$mdUtil.supplant("translateX({0}%) scale({1},1)",[(value-100)/2,value/100]);var styles=toVendorCSS({transform:to});angular.element(target).css(styles)}}function clamp(value){return Math.max(0,Math.min(value||0,100))}}ngmaterial.components.progressLinear=angular.module("material.components.progressLinear");