(function(window,angular,undefined){"use strict";angular.module("material.components.progressCircular",["material.core"]);MdProgressCircularDirective.$inject=["$window","$mdProgressCircular","$mdTheming","$mdUtil","$interval","$log"];angular.module("material.components.progressCircular").directive("mdProgressCircular",MdProgressCircularDirective);function MdProgressCircularDirective($window,$mdProgressCircular,$mdTheming,$mdUtil,$interval,$log){var rAF=$window.requestAnimationFrame||$window.webkitRequestAnimationFrame||angular.noop;var cAF=$window.cancelAnimationFrame||$window.webkitCancelAnimationFrame||$window.webkitCancelRequestAnimationFrame||angular.noop;var DEGREE_IN_RADIANS=$window.Math.PI/180;var MODE_DETERMINATE="determinate";var MODE_INDETERMINATE="indeterminate";var DISABLED_CLASS="_md-progress-circular-disabled";var INDETERMINATE_CLASS="md-mode-indeterminate";return{restrict:"E",scope:{value:"@",mdDiameter:"@",mdMode:"@"},template:'<svg xmlns="http://www.w3.org/2000/svg">'+'<path fill="none"/>'+"</svg>",compile:function(element,attrs){element.attr({"aria-valuemin":0,"aria-valuemax":100,role:"progressbar"});if(angular.isUndefined(attrs.mdMode)){var hasValue=angular.isDefined(attrs.value);var mode=hasValue?MODE_DETERMINATE:MODE_INDETERMINATE;var info="Auto-adding the missing md-mode='{0}' to the ProgressCircular element";attrs.$set("mdMode",mode)}else{attrs.$set("mdMode",attrs.mdMode.trim())}return MdProgressCircularLink}};function MdProgressCircularLink(scope,element,attrs){var node=element[0];var svg=angular.element(node.querySelector("svg"));var path=angular.element(node.querySelector("path"));var startIndeterminate=$mdProgressCircular.startIndeterminate;var endIndeterminate=$mdProgressCircular.endIndeterminate;var rotationIndeterminate=0;var lastAnimationId=0;var lastDrawFrame;var interval;$mdTheming(element);element.toggleClass(DISABLED_CLASS,attrs.hasOwnProperty("disabled"));if(scope.mdMode===MODE_INDETERMINATE){startIndeterminateAnimation()}scope.$on("$destroy",function(){cleanupIndeterminateAnimation();if(lastDrawFrame){cAF(lastDrawFrame)}});scope.$watchGroup(["value","mdMode",function(){var isDisabled=node.disabled;if(isDisabled===true||isDisabled===false){return isDisabled}return angular.isDefined(element.attr("disabled"))}],function(newValues,oldValues){var mode=newValues[1];var isDisabled=newValues[2];var wasDisabled=oldValues[2];if(isDisabled!==wasDisabled){element.toggleClass(DISABLED_CLASS,!!isDisabled)}if(isDisabled){cleanupIndeterminateAnimation()}else{if(mode!==MODE_DETERMINATE&&mode!==MODE_INDETERMINATE){mode=MODE_INDETERMINATE;attrs.$set("mdMode",mode)}if(mode===MODE_INDETERMINATE){startIndeterminateAnimation()}else{var newValue=clamp(newValues[0]);cleanupIndeterminateAnimation();element.attr("aria-valuenow",newValue);renderCircle(clamp(oldValues[0]),newValue)}}});scope.$watch("mdDiameter",function(newValue){var diameter=getSize(newValue);var strokeWidth=getStroke(diameter);var transformOrigin=diameter/2+"px";var dimensions={width:diameter+"px",height:diameter+"px"};svg[0].setAttribute("viewBox","0 0 "+diameter+" "+diameter);svg.css(dimensions).css("transform-origin",transformOrigin+" "+transformOrigin+" "+transformOrigin);element.css(dimensions);path.css("stroke-width",strokeWidth+"px")});function renderCircle(animateFrom,animateTo,easing,duration,rotation){var id=++lastAnimationId;var startTime=$mdUtil.now();var changeInValue=animateTo-animateFrom;var diameter=getSize(scope.mdDiameter);var pathDiameter=diameter-getStroke(diameter);var ease=easing||$mdProgressCircular.easeFn;var animationDuration=duration||$mdProgressCircular.duration;if(animateTo===animateFrom){path.attr("d",getSvgArc(animateTo,diameter,pathDiameter,rotation))}else{lastDrawFrame=rAF(function animation(){var currentTime=$window.Math.max(0,$window.Math.min($mdUtil.now()-startTime,animationDuration));path.attr("d",getSvgArc(ease(currentTime,animateFrom,changeInValue,animationDuration),diameter,pathDiameter,rotation));if(id===lastAnimationId&&currentTime<animationDuration){lastDrawFrame=rAF(animation)}})}}function animateIndeterminate(){renderCircle(startIndeterminate,endIndeterminate,$mdProgressCircular.easeFnIndeterminate,$mdProgressCircular.durationIndeterminate,rotationIndeterminate);rotationIndeterminate=(rotationIndeterminate+endIndeterminate)%100;var temp=startIndeterminate;startIndeterminate=-endIndeterminate;endIndeterminate=-temp}function startIndeterminateAnimation(){if(!interval){interval=$interval(animateIndeterminate,$mdProgressCircular.durationIndeterminate+50,0,false);animateIndeterminate();element.addClass(INDETERMINATE_CLASS).removeAttr("aria-valuenow")}}function cleanupIndeterminateAnimation(){if(interval){$interval.cancel(interval);interval=null;element.removeClass(INDETERMINATE_CLASS)}}}function getSvgArc(current,diameter,pathDiameter,rotation){var maximumAngle=359.99/100;var startPoint=rotation||0;var radius=diameter/2;var pathRadius=pathDiameter/2;var startAngle=startPoint*maximumAngle;var endAngle=current*maximumAngle;var start=polarToCartesian(radius,pathRadius,startAngle);var end=polarToCartesian(radius,pathRadius,endAngle+startAngle);var arcSweep=endAngle<0?0:1;var largeArcFlag;if(endAngle<0){largeArcFlag=endAngle>=-180?0:1}else{largeArcFlag=endAngle<=180?0:1}return"M"+start+"A"+pathRadius+","+pathRadius+" 0 "+largeArcFlag+","+arcSweep+" "+end}function polarToCartesian(radius,pathRadius,angleInDegrees){var angleInRadians=(angleInDegrees-90)*DEGREE_IN_RADIANS;return radius+pathRadius*$window.Math.cos(angleInRadians)+","+(radius+pathRadius*$window.Math.sin(angleInRadians))}function clamp(value){return $window.Math.max(0,$window.Math.min(value||0,100))}function getSize(value){var defaultValue=$mdProgressCircular.progressSize;if(value){var parsed=parseFloat(value);if(value.lastIndexOf("%")===value.length-1){parsed=parsed/100*defaultValue}return parsed}return defaultValue}function getStroke(diameter){return $mdProgressCircular.strokeWidth/100*diameter}}angular.module("material.components.progressCircular").provider("$mdProgressCircular",MdProgressCircularProvider);function MdProgressCircularProvider(){var progressConfig={progressSize:50,strokeWidth:10,duration:100,easeFn:linearEase,durationIndeterminate:500,startIndeterminate:3,endIndeterminate:80,easeFnIndeterminate:materialEase,easingPresets:{linearEase:linearEase,materialEase:materialEase}};return{configure:function(options){progressConfig=angular.extend(progressConfig,options||{});return progressConfig},$get:function(){return progressConfig}};function linearEase(t,b,c,d){return c*t/d+b}function materialEase(t,b,c,d){var ts=(t/=d)*t;var tc=ts*t;return b+c*(6*tc*ts+-15*ts*ts+10*tc)}}})(window,window.angular);