(function(window,angular,undefined){"use strict";angular.module("material.components.autocomplete",["material.core","material.components.icon","material.components.virtualRepeat"]);MdAutocompleteCtrl.$inject=["$scope","$element","$mdUtil","$mdConstant","$mdTheming","$window","$animate","$rootElement","$attrs","$q","$log"];angular.module("material.components.autocomplete").controller("MdAutocompleteCtrl",MdAutocompleteCtrl);var ITEM_HEIGHT=41,MAX_HEIGHT=5.5*ITEM_HEIGHT,MENU_PADDING=8,INPUT_PADDING=2;function MdAutocompleteCtrl($scope,$element,$mdUtil,$mdConstant,$mdTheming,$window,$animate,$rootElement,$attrs,$q,$log){var ctrl=this,itemParts=$scope.itemsExpr.split(/ in /i),itemExpr=itemParts[1],elements=null,cache={},noBlur=false,selectedItemWatchers=[],hasFocus=false,lastCount=0,fetchesInProgress=0,enableWrapScroll=null,inputModelCtrl=null;defineProperty("hidden",handleHiddenChange,true);ctrl.scope=$scope;ctrl.parent=$scope.$parent;ctrl.itemName=itemParts[0];ctrl.matches=[];ctrl.loading=false;ctrl.hidden=true;ctrl.index=null;ctrl.messages=[];ctrl.id=$mdUtil.nextUid();ctrl.isDisabled=null;ctrl.isRequired=null;ctrl.isReadonly=null;ctrl.hasNotFound=false;ctrl.keydown=keydown;ctrl.blur=blur;ctrl.focus=focus;ctrl.clear=clearValue;ctrl.select=select;ctrl.listEnter=onListEnter;ctrl.listLeave=onListLeave;ctrl.mouseUp=onMouseup;ctrl.getCurrentDisplayValue=getCurrentDisplayValue;ctrl.registerSelectedItemWatcher=registerSelectedItemWatcher;ctrl.unregisterSelectedItemWatcher=unregisterSelectedItemWatcher;ctrl.notFoundVisible=notFoundVisible;ctrl.loadingIsVisible=loadingIsVisible;ctrl.positionDropdown=positionDropdown;return init();function init(){$mdUtil.initOptionalProperties($scope,$attrs,{searchText:"",selectedItem:null});$mdTheming($element);configureWatchers();$mdUtil.nextTick(function(){gatherElements();moveDropdown();if($scope.autofocus){$element.on("focus",focusInputElement)}})}function updateModelValidators(){if(!$scope.requireMatch||!inputModelCtrl)return;inputModelCtrl.$setValidity("md-require-match",!!$scope.selectedItem)}function positionDropdown(){if(!elements)return $mdUtil.nextTick(positionDropdown,false,$scope);var hrect=elements.wrap.getBoundingClientRect(),vrect=elements.snap.getBoundingClientRect(),root=elements.root.getBoundingClientRect(),top=vrect.bottom-root.top,bot=root.bottom-vrect.top,left=hrect.left-root.left,width=hrect.width,offset=getVerticalOffset(),styles;if($attrs.mdFloatingLabel){left+=INPUT_PADDING;width-=INPUT_PADDING*2}styles={left:left+"px",minWidth:width+"px",maxWidth:Math.max(hrect.right-root.left,root.right-hrect.left)-MENU_PADDING+"px"};if(top>bot&&root.height-hrect.bottom-MENU_PADDING<MAX_HEIGHT){styles.top="auto";styles.bottom=bot+"px";styles.maxHeight=Math.min(MAX_HEIGHT,hrect.top-root.top-MENU_PADDING)+"px"}else{styles.top=top-offset+"px";styles.bottom="auto";styles.maxHeight=Math.min(MAX_HEIGHT,root.bottom+$mdUtil.scrollTop()-hrect.bottom-MENU_PADDING)+"px"}elements.$.scrollContainer.css(styles);$mdUtil.nextTick(correctHorizontalAlignment,false);function getVerticalOffset(){var offset=0;var inputContainer=$element.find("md-input-container");if(inputContainer.length){var input=inputContainer.find("input");offset=inputContainer.prop("offsetHeight");offset-=input.prop("offsetTop");offset-=input.prop("offsetHeight");offset+=inputContainer.prop("offsetTop")}return offset}function correctHorizontalAlignment(){var dropdown=elements.scrollContainer.getBoundingClientRect(),styles={};if(dropdown.right>root.right-MENU_PADDING){styles.left=hrect.right-dropdown.width+"px"}elements.$.scrollContainer.css(styles)}}function moveDropdown(){if(!elements.$.root.length)return;$mdTheming(elements.$.scrollContainer);elements.$.scrollContainer.detach();elements.$.root.append(elements.$.scrollContainer);if($animate.pin)$animate.pin(elements.$.scrollContainer,$rootElement)}function focusInputElement(){elements.input.focus()}function configureWatchers(){var wait=parseInt($scope.delay,10)||0;$attrs.$observe("disabled",function(value){ctrl.isDisabled=$mdUtil.parseAttributeBoolean(value,false)});$attrs.$observe("required",function(value){ctrl.isRequired=$mdUtil.parseAttributeBoolean(value,false)});$attrs.$observe("readonly",function(value){ctrl.isReadonly=$mdUtil.parseAttributeBoolean(value,false)});$scope.$watch("searchText",wait?$mdUtil.debounce(handleSearchText,wait):handleSearchText);$scope.$watch("selectedItem",selectedItemChange);angular.element($window).on("resize",positionDropdown);$scope.$on("$destroy",cleanup)}function cleanup(){if(!ctrl.hidden){$mdUtil.enableScrolling()}angular.element($window).off("resize",positionDropdown);if(elements){var items=["ul","scroller","scrollContainer","input"];angular.forEach(items,function(key){elements.$[key].remove()})}}function gatherElements(){elements={main:$element[0],scrollContainer:$element[0].querySelector(".md-virtual-repeat-container"),scroller:$element[0].querySelector(".md-virtual-repeat-scroller"),ul:$element.find("ul")[0],input:$element.find("input")[0],wrap:$element.find("md-autocomplete-wrap")[0],root:document.body};elements.li=elements.ul.getElementsByTagName("li");elements.snap=getSnapTarget();elements.$=getAngularElements(elements);inputModelCtrl=elements.$.input.controller("ngModel")}function getSnapTarget(){for(var element=$element;element.length;element=element.parent()){if(angular.isDefined(element.attr("md-autocomplete-snap")))return element[0]}return elements.wrap}function getAngularElements(elements){var obj={};for(var key in elements){if(elements.hasOwnProperty(key))obj[key]=angular.element(elements[key])}return obj}function handleHiddenChange(hidden,oldHidden){if(!hidden&&oldHidden){positionDropdown();if(elements){$mdUtil.disableScrollAround(elements.ul);enableWrapScroll=disableElementScrollEvents(angular.element(elements.wrap))}}else if(hidden&&!oldHidden){$mdUtil.enableScrolling();if(enableWrapScroll){enableWrapScroll();enableWrapScroll=null}}}function disableElementScrollEvents(element){function preventDefault(e){e.preventDefault()}element.on("wheel",preventDefault);element.on("touchmove",preventDefault);return function(){element.off("wheel",preventDefault);element.off("touchmove",preventDefault)}}function onListEnter(){noBlur=true}function onListLeave(){if(!hasFocus&&!ctrl.hidden)elements.input.focus();noBlur=false;ctrl.hidden=shouldHide()}function onMouseup(){elements.input.focus()}function selectedItemChange(selectedItem,previousSelectedItem){updateModelValidators();if(selectedItem){getDisplayValue(selectedItem).then(function(val){$scope.searchText=val;handleSelectedItemChange(selectedItem,previousSelectedItem)})}else if(previousSelectedItem&&$scope.searchText){getDisplayValue(previousSelectedItem).then(function(displayValue){if(displayValue.toString().toLowerCase()===$scope.searchText.toLowerCase()){$scope.searchText=""}})}if(selectedItem!==previousSelectedItem)announceItemChange()}function announceItemChange(){angular.isFunction($scope.itemChange)&&$scope.itemChange(getItemAsNameVal($scope.selectedItem))}function announceTextChange(){angular.isFunction($scope.textChange)&&$scope.textChange()}function handleSelectedItemChange(selectedItem,previousSelectedItem){selectedItemWatchers.forEach(function(watcher){watcher(selectedItem,previousSelectedItem)})}function registerSelectedItemWatcher(cb){if(selectedItemWatchers.indexOf(cb)==-1){selectedItemWatchers.push(cb)}}function unregisterSelectedItemWatcher(cb){var i=selectedItemWatchers.indexOf(cb);if(i!=-1){selectedItemWatchers.splice(i,1)}}function handleSearchText(searchText,previousSearchText){ctrl.index=getDefaultIndex();if(searchText===previousSearchText)return;updateModelValidators();getDisplayValue($scope.selectedItem).then(function(val){if(searchText!==val){$scope.selectedItem=null;if(searchText!==previousSearchText)announceTextChange();if(!isMinLengthMet()){ctrl.matches=[];setLoading(false);updateMessages()}else{handleQuery()}}})}function blur($event){hasFocus=false;if(!noBlur){ctrl.hidden=shouldHide();evalAttr("ngBlur",{$event:$event})}}function doBlur(forceBlur){if(forceBlur){noBlur=false;hasFocus=false}elements.input.blur()}function focus($event){hasFocus=true;if(isSearchable()&&isMinLengthMet()){handleQuery()}ctrl.hidden=shouldHide();evalAttr("ngFocus",{$event:$event})}function keydown(event){switch(event.keyCode){case $mdConstant.KEY_CODE.DOWN_ARROW:if(ctrl.loading)return;event.stopPropagation();event.preventDefault();ctrl.index=Math.min(ctrl.index+1,ctrl.matches.length-1);updateScroll();updateMessages();break;case $mdConstant.KEY_CODE.UP_ARROW:if(ctrl.loading)return;event.stopPropagation();event.preventDefault();ctrl.index=ctrl.index<0?ctrl.matches.length-1:Math.max(0,ctrl.index-1);updateScroll();updateMessages();break;case $mdConstant.KEY_CODE.TAB:onListLeave();if(ctrl.hidden||ctrl.loading||ctrl.index<0||ctrl.matches.length<1)return;select(ctrl.index);break;case $mdConstant.KEY_CODE.ENTER:if(ctrl.hidden||ctrl.loading||ctrl.index<0||ctrl.matches.length<1)return;if(hasSelection())return;event.stopPropagation();event.preventDefault();select(ctrl.index);break;case $mdConstant.KEY_CODE.ESCAPE:event.preventDefault();if(!shouldProcessEscape())return;event.stopPropagation();clearSelectedItem();if($scope.searchText&&hasEscapeOption("clear")){clearSearchText()}ctrl.hidden=true;if(hasEscapeOption("blur")){doBlur(true)}break;default:}}function getMinLength(){return angular.isNumber($scope.minLength)?$scope.minLength:1}function getDisplayValue(item){return $q.when(getItemText(item)||item).then(function(itemText){if(itemText&&!angular.isString(itemText)){$log.warn("md-autocomplete: Could not resolve display value to a string. "+"Please check the `md-item-text` attribute.")}return itemText});function getItemText(item){return item&&$scope.itemText?$scope.itemText(getItemAsNameVal(item)):null}}function getItemAsNameVal(item){if(!item)return undefined;var locals={};if(ctrl.itemName)locals[ctrl.itemName]=item;return locals}function getDefaultIndex(){return $scope.autoselect?0:-1}function setLoading(value){if(ctrl.loading!=value){ctrl.loading=value}ctrl.hidden=shouldHide()}function shouldHide(){if(!isSearchable())return true;else return!shouldShow()}function isSearchable(){if(ctrl.loading&&!hasMatches())return false;else if(hasSelection())return false;else if(!hasFocus)return false;return true}function shouldProcessEscape(){return hasEscapeOption("blur")||!ctrl.hidden||ctrl.loading||hasEscapeOption("clear")&&$scope.searchText}function hasEscapeOption(option){return!$scope.escapeOptions||$scope.escapeOptions.toLowerCase().indexOf(option)!==-1}function shouldShow(){return isMinLengthMet()&&hasMatches()||notFoundVisible()}function hasMatches(){return ctrl.matches.length?true:false}function hasSelection(){return ctrl.scope.selectedItem?true:false}function loadingIsVisible(){return ctrl.loading&&!hasSelection()}function getCurrentDisplayValue(){return getDisplayValue(ctrl.matches[ctrl.index])}function isMinLengthMet(){return($scope.searchText||"").length>=getMinLength()}function defineProperty(key,handler,value){Object.defineProperty(ctrl,key,{get:function(){return value},set:function(newValue){var oldValue=value;value=newValue;handler(newValue,oldValue)}})}function select(index){$mdUtil.nextTick(function(){getDisplayValue(ctrl.matches[index]).then(function(val){var ngModel=elements.$.input.controller("ngModel");ngModel.$setViewValue(val);ngModel.$render()}).finally(function(){$scope.selectedItem=ctrl.matches[index];setLoading(false)})},false)}function clearValue(){clearSelectedItem();clearSearchText()}function clearSelectedItem(){ctrl.index=0;ctrl.matches=[]}function clearSearchText(){setLoading(true);$scope.searchText="";var eventObj=document.createEvent("CustomEvent");eventObj.initCustomEvent("change",true,true,{value:""});elements.input.dispatchEvent(eventObj);elements.input.blur();$scope.searchText="";elements.input.focus()}function fetchResults(searchText){var items=$scope.$parent.$eval(itemExpr),term=searchText.toLowerCase(),isList=angular.isArray(items),isPromise=!!items.then;if(isList)onResultsRetrieved(items);else if(isPromise)handleAsyncResults(items);function handleAsyncResults(items){if(!items)return;items=$q.when(items);fetchesInProgress++;setLoading(true);$mdUtil.nextTick(function(){items.then(onResultsRetrieved).finally(function(){if(--fetchesInProgress===0){setLoading(false)}})},true,$scope)}function onResultsRetrieved(matches){cache[term]=matches;if((searchText||"")!==($scope.searchText||"")){return}handleResults(matches)}}function updateMessages(){getCurrentDisplayValue().then(function(msg){ctrl.messages=[getCountMessage(),msg]})}function getCountMessage(){if(lastCount===ctrl.matches.length)return"";lastCount=ctrl.matches.length;switch(ctrl.matches.length){case 0:return"There are no matches available.";case 1:return"There is 1 match available.";default:return"There are "+ctrl.matches.length+" matches available."}}function updateScroll(){if(!elements.li[0])return;var height=elements.li[0].offsetHeight,top=height*ctrl.index,bot=top+height,hgt=elements.scroller.clientHeight,scrollTop=elements.scroller.scrollTop;if(top<scrollTop){scrollTo(top)}else if(bot>scrollTop+hgt){scrollTo(bot-hgt)}}function isPromiseFetching(){return fetchesInProgress!==0}function scrollTo(offset){elements.$.scrollContainer.controller("mdVirtualRepeatContainer").scrollTo(offset)}function notFoundVisible(){var textLength=(ctrl.scope.searchText||"").length;return ctrl.hasNotFound&&!hasMatches()&&(!ctrl.loading||isPromiseFetching())&&textLength>=getMinLength()&&(hasFocus||noBlur)&&!hasSelection()}function handleQuery(){var searchText=$scope.searchText||"";var term=searchText.toLowerCase();if(!$scope.noCache&&cache[term]){handleResults(cache[term])}else{fetchResults(searchText)}ctrl.hidden=shouldHide()}function handleResults(results){ctrl.matches=results;ctrl.hidden=shouldHide();if(ctrl.loading)setLoading(false);if($scope.selectOnMatch)selectItemOnMatch();updateMessages();positionDropdown()}function selectItemOnMatch(){var searchText=$scope.searchText,matches=ctrl.matches,item=matches[0];if(matches.length===1)getDisplayValue(item).then(function(displayValue){var isMatching=searchText==displayValue;if($scope.matchInsensitive&&!isMatching){isMatching=searchText.toLowerCase()==displayValue.toLowerCase()}if(isMatching)select(0)})}function evalAttr(attr,locals){if($attrs[attr]){$scope.$parent.$eval($attrs[attr],locals||{})}}}MdAutocomplete.$inject=["$$mdSvgRegistry"];angular.module("material.components.autocomplete").directive("mdAutocomplete",MdAutocomplete);function MdAutocomplete($$mdSvgRegistry){return{controller:"MdAutocompleteCtrl",controllerAs:"$mdAutocompleteCtrl",scope:{inputName:"@mdInputName",inputMinlength:"@mdInputMinlength",inputMaxlength:"@mdInputMaxlength",searchText:"=?mdSearchText",selectedItem:"=?mdSelectedItem",itemsExpr:"@mdItems",itemText:"&mdItemText",placeholder:"@placeholder",noCache:"=?mdNoCache",requireMatch:"=?mdRequireMatch",selectOnMatch:"=?mdSelectOnMatch",matchInsensitive:"=?mdMatchCaseInsensitive",itemChange:"&?mdSelectedItemChange",textChange:"&?mdSearchTextChange",minLength:"=?mdMinLength",delay:"=?mdDelay",autofocus:"=?mdAutofocus",floatingLabel:"@?mdFloatingLabel",autoselect:"=?mdAutoselect",menuClass:"@?mdMenuClass",inputId:"@?mdInputId",escapeOptions:"@?mdEscapeOptions"},link:function(scope,element,attrs,controller){controller.hasNotFound=!!element.attr("md-has-not-found")},template:function(element,attr){var noItemsTemplate=getNoItemsTemplate(),itemTemplate=getItemTemplate(),leftover=element.html(),tabindex=attr.tabindex;if(noItemsTemplate)element.attr("md-has-not-found",true);element.attr("tabindex","-1");return"        <md-autocomplete-wrap            ng-class=\"{ 'md-whiteframe-z1': !floatingLabel, 'md-menu-showing': !$mdAutocompleteCtrl.hidden }\">          "+getInputElement()+'          <md-progress-linear              class="'+(attr.mdFloatingLabel?"md-inline":"")+'"              ng-if="$mdAutocompleteCtrl.loadingIsVisible()"              md-mode="indeterminate"></md-progress-linear>          <md-virtual-repeat-container              md-auto-shrink              md-auto-shrink-min="1"              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"              ng-mouseup="$mdAutocompleteCtrl.mouseUp()"              ng-hide="$mdAutocompleteCtrl.hidden"              class="md-autocomplete-suggestions-container md-whiteframe-z1"              ng-class="{ \'md-not-found\': $mdAutocompleteCtrl.notFoundVisible() }"              role="presentation">            <ul class="md-autocomplete-suggestions"                ng-class="::menuClass"                id="ul-{{$mdAutocompleteCtrl.id}}">              <li md-virtual-repeat="item in $mdAutocompleteCtrl.matches"                  ng-class="{ selected: $index === $mdAutocompleteCtrl.index }"                  ng-click="$mdAutocompleteCtrl.select($index)"                  md-extra-name="$mdAutocompleteCtrl.itemName">                  '+itemTemplate+"                  </li>"+noItemsTemplate+'            </ul>          </md-virtual-repeat-container>        </md-autocomplete-wrap>        <aria-status            class="md-visually-hidden"            role="status"            aria-live="assertive">          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>        </aria-status>';function getItemTemplate(){var templateTag=element.find("md-item-template").detach(),html=templateTag.length?templateTag.html():element.html();if(!templateTag.length)element.empty();return"<md-autocomplete-parent-scope md-autocomplete-replace>"+html+"</md-autocomplete-parent-scope>"}function getNoItemsTemplate(){var templateTag=element.find("md-not-found").detach(),template=templateTag.length?templateTag.html():"";return template?'<li ng-if="$mdAutocompleteCtrl.notFoundVisible()"                         md-autocomplete-parent-scope>'+template+"</li>":""}function getInputElement(){if(attr.mdFloatingLabel){return'            <md-input-container ng-if="floatingLabel">              <label>{{floatingLabel}}</label>              <input type="search"                  '+(tabindex!=null?'tabindex="'+tabindex+'"':"")+'                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"                  name="{{inputName}}"                  autocomplete="off"                  ng-required="$mdAutocompleteCtrl.isRequired"                  ng-readonly="$mdAutocompleteCtrl.isReadonly"                  ng-minlength="inputMinlength"                  ng-maxlength="inputMaxlength"                  ng-disabled="$mdAutocompleteCtrl.isDisabled"                  ng-model="$mdAutocompleteCtrl.scope.searchText"                  ng-model-options="{ allowInvalid: true }"                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"                  ng-blur="$mdAutocompleteCtrl.blur($event)"                  ng-focus="$mdAutocompleteCtrl.focus($event)"                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                  '+(attr.mdNoAsterisk!=null?'md-no-asterisk="'+attr.mdNoAsterisk+'"':"")+"                  "+(attr.mdSelectOnFocus!=null?'md-select-on-focus=""':"")+'                  aria-label="{{floatingLabel}}"                  aria-autocomplete="list"                  role="combobox"                  aria-haspopup="true"                  aria-activedescendant=""                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>              <div md-autocomplete-parent-scope md-autocomplete-replace>'+leftover+"</div>            </md-input-container>"}else{return'            <input type="search"                '+(tabindex!=null?'tabindex="'+tabindex+'"':"")+'                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"                name="{{inputName}}"                ng-if="!floatingLabel"                autocomplete="off"                ng-required="$mdAutocompleteCtrl.isRequired"                ng-disabled="$mdAutocompleteCtrl.isDisabled"                ng-readonly="$mdAutocompleteCtrl.isReadonly"                ng-model="$mdAutocompleteCtrl.scope.searchText"                ng-keydown="$mdAutocompleteCtrl.keydown($event)"                ng-blur="$mdAutocompleteCtrl.blur($event)"                ng-focus="$mdAutocompleteCtrl.focus($event)"                placeholder="{{placeholder}}"                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                '+(attr.mdSelectOnFocus!=null?'md-select-on-focus=""':"")+'                aria-label="{{placeholder}}"                aria-autocomplete="list"                role="combobox"                aria-haspopup="true"                aria-activedescendant=""                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>            <button                type="button"                tabindex="-1"                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"                ng-click="$mdAutocompleteCtrl.clear($event)">              <md-icon md-svg-src="'+$$mdSvgRegistry.mdClose+'"></md-icon>              <span class="md-visually-hidden">Clear</span>            </button>                '}}}}}MdAutocompleteItemScopeDirective.$inject=["$compile","$mdUtil"];angular.module("material.components.autocomplete").directive("mdAutocompleteParentScope",MdAutocompleteItemScopeDirective);function MdAutocompleteItemScopeDirective($compile,$mdUtil){return{restrict:"AE",compile:compile,terminal:true,transclude:"element"};function compile(tElement,tAttr,transclude){return function postLink(scope,element,attr){var ctrl=scope.$mdAutocompleteCtrl;var newScope=ctrl.parent.$new();var itemName=ctrl.itemName;watchVariable("$index","$index");watchVariable("item",itemName);connectScopes();transclude(newScope,function(clone){element.after(clone)});function watchVariable(variable,alias){newScope[alias]=scope[variable];scope.$watch(variable,function(value){$mdUtil.nextTick(function(){newScope[alias]=value})})}function connectScopes(){var scopeDigesting=false;var newScopeDigesting=false;scope.$watch(function(){if(newScopeDigesting||scopeDigesting){return}scopeDigesting=true;scope.$$postDigest(function(){if(!newScopeDigesting){newScope.$digest()}scopeDigesting=newScopeDigesting=false})});newScope.$watch(function(){newScopeDigesting=true})}}}}MdHighlightCtrl.$inject=["$scope","$element","$attrs"];angular.module("material.components.autocomplete").controller("MdHighlightCtrl",MdHighlightCtrl);function MdHighlightCtrl($scope,$element,$attrs){this.$scope=$scope;this.$element=$element;this.$attrs=$attrs;this.regex=null}MdHighlightCtrl.prototype.init=function(unsafeTermFn,unsafeContentFn){this.flags=this.$attrs.mdHighlightFlags||"";this.unregisterFn=this.$scope.$watch(function($scope){return{term:unsafeTermFn($scope),contentText:unsafeContentFn($scope)}}.bind(this),this.onRender.bind(this),true);this.$element.on("$destroy",this.unregisterFn)};MdHighlightCtrl.prototype.onRender=function(state,prevState){var contentText=state.contentText;if(this.regex===null||state.term!==prevState.term){this.regex=this.createRegex(state.term,this.flags)}if(state.term){this.applyRegex(contentText)}else{this.$element.text(contentText)}};MdHighlightCtrl.prototype.applyRegex=function(text){var tokens=this.resolveTokens(text);this.$element.empty();tokens.forEach(function(token){if(token.isMatch){var tokenEl=angular.element('<span class="highlight">').text(token.text);this.$element.append(tokenEl)}else{this.$element.append(document.createTextNode(token))}}.bind(this))};MdHighlightCtrl.prototype.resolveTokens=function(string){var tokens=[];var lastIndex=0;string.replace(this.regex,function(match,index){appendToken(lastIndex,index);tokens.push({text:match,isMatch:true});lastIndex=index+match.length});appendToken(lastIndex);return tokens;function appendToken(from,to){var targetText=string.slice(from,to);targetText&&tokens.push(targetText)}};MdHighlightCtrl.prototype.createRegex=function(term,flags){var startFlag="",endFlag="";var regexTerm=this.sanitizeRegex(term);if(flags.indexOf("^")>=0)startFlag="^";if(flags.indexOf("$")>=0)endFlag="$";return new RegExp(startFlag+regexTerm+endFlag,flags.replace(/[$\^]/g,""))};MdHighlightCtrl.prototype.sanitizeRegex=function(term){return term&&term.toString().replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g,"\\$&")};MdHighlight.$inject=["$interpolate","$parse"];angular.module("material.components.autocomplete").directive("mdHighlightText",MdHighlight);function MdHighlight($interpolate,$parse){return{terminal:true,controller:"MdHighlightCtrl",compile:function mdHighlightCompile(tElement,tAttr){var termExpr=$parse(tAttr.mdHighlightText);var unsafeContentExpr=$interpolate(tElement.html());return function mdHighlightLink(scope,element,attr,ctrl){ctrl.init(termExpr,unsafeContentExpr)}}}}})(window,window.angular);