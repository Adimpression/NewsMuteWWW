(function(window,angular,undefined){"use strict";mdInputContainerDirective.$inject=["$mdTheming","$parse"];inputTextareaDirective.$inject=["$mdUtil","$window","$mdAria","$timeout","$mdGesture"];mdMaxlengthDirective.$inject=["$animate","$mdUtil"];placeholderDirective.$inject=["$compile"];ngMessageDirective.$inject=["$mdUtil"];mdSelectOnFocusDirective.$inject=["$timeout"];mdInputInvalidMessagesAnimation.$inject=["$$AnimateRunner","$animateCss","$mdUtil"];ngMessagesAnimation.$inject=["$$AnimateRunner","$animateCss","$mdUtil"];ngMessageAnimation.$inject=["$$AnimateRunner","$animateCss","$mdUtil"];angular.module("material.components.input",["material.core"]).directive("mdInputContainer",mdInputContainerDirective).directive("label",labelDirective).directive("input",inputTextareaDirective).directive("textarea",inputTextareaDirective).directive("mdMaxlength",mdMaxlengthDirective).directive("placeholder",placeholderDirective).directive("ngMessages",ngMessagesDirective).directive("ngMessage",ngMessageDirective).directive("ngMessageExp",ngMessageDirective).directive("mdSelectOnFocus",mdSelectOnFocusDirective).animation(".md-input-invalid",mdInputInvalidMessagesAnimation).animation(".md-input-messages-animation",ngMessagesAnimation).animation(".md-input-message-animation",ngMessageAnimation).service("mdInputInvalidAnimation",mdInputInvalidMessagesAnimation).service("mdInputMessagesAnimation",ngMessagesAnimation).service("mdInputMessageAnimation",ngMessageAnimation);function mdInputContainerDirective($mdTheming,$parse){ContainerCtrl.$inject=["$scope","$element","$attrs","$animate"];var INPUT_TAGS=["INPUT","TEXTAREA","SELECT","MD-SELECT"];var LEFT_SELECTORS=INPUT_TAGS.reduce(function(selectors,isel){return selectors.concat(["md-icon ~ "+isel,".md-icon ~ "+isel])},[]).join(",");var RIGHT_SELECTORS=INPUT_TAGS.reduce(function(selectors,isel){return selectors.concat([isel+" ~ md-icon",isel+" ~ .md-icon"])},[]).join(",");return{restrict:"E",compile:compile,controller:ContainerCtrl};function compile(tElement){var leftIcon=tElement[0].querySelector(LEFT_SELECTORS);var rightIcon=tElement[0].querySelector(RIGHT_SELECTORS);if(leftIcon){tElement.addClass("md-icon-left")}if(rightIcon){tElement.addClass("md-icon-right")}return function postLink(scope,element){$mdTheming(element)}}function ContainerCtrl($scope,$element,$attrs,$animate){var self=this;self.isErrorGetter=$attrs.mdIsError&&$parse($attrs.mdIsError);self.delegateClick=function(){self.input.focus()};self.element=$element;self.setFocused=function(isFocused){$element.toggleClass("md-input-focused",!!isFocused)};self.setHasValue=function(hasValue){$element.toggleClass("md-input-has-value",!!hasValue)};self.setHasPlaceholder=function(hasPlaceholder){$element.toggleClass("md-input-has-placeholder",!!hasPlaceholder)};self.setInvalid=function(isInvalid){if(isInvalid){$animate.addClass($element,"md-input-invalid")}else{$animate.removeClass($element,"md-input-invalid")}};$scope.$watch(function(){return self.label&&self.input},function(hasLabelAndInput){if(hasLabelAndInput&&!self.label.attr("for")){self.label.attr("for",self.input.attr("id"))}})}}function labelDirective(){return{restrict:"E",require:"^?mdInputContainer",link:function(scope,element,attr,containerCtrl){if(!containerCtrl||attr.mdNoFloat||element.hasClass("md-container-ignore"))return;containerCtrl.label=element;scope.$on("$destroy",function(){containerCtrl.label=null})}}}function inputTextareaDirective($mdUtil,$window,$mdAria,$timeout,$mdGesture){return{restrict:"E",require:["^?mdInputContainer","?ngModel","?^form"],link:postLink};function postLink(scope,element,attr,ctrls){var containerCtrl=ctrls[0];var hasNgModel=!!ctrls[1];var ngModelCtrl=ctrls[1]||$mdUtil.fakeNgModel();var parentForm=ctrls[2];var isReadonly=angular.isDefined(attr.readonly);var mdNoAsterisk=$mdUtil.parseAttributeBoolean(attr.mdNoAsterisk);var tagName=element[0].tagName.toLowerCase();if(!containerCtrl)return;if(attr.type==="hidden"){element.attr("aria-hidden","true");return}else if(containerCtrl.input){if(containerCtrl.input[0].contains(element[0])){return}else{throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!")}}containerCtrl.input=element;setupAttributeWatchers();var errorsSpacer=angular.element('<div class="md-errors-spacer">');element.after(errorsSpacer);if(!containerCtrl.label){$mdAria.expect(element,"aria-label",attr.placeholder)}element.addClass("md-input");if(!element.attr("id")){element.attr("id","input_"+$mdUtil.nextUid())}if(tagName==="input"&&attr.type==="number"&&attr.min&&attr.max&&!attr.step){element.attr("step","any")}else if(tagName==="textarea"){setupTextarea()}if(!hasNgModel){inputCheckValue()}var isErrorGetter=containerCtrl.isErrorGetter||function(){return ngModelCtrl.$invalid&&(ngModelCtrl.$touched||parentForm&&parentForm.$submitted)};scope.$watch(isErrorGetter,containerCtrl.setInvalid);if(attr.ngValue){attr.$observe("value",inputCheckValue)}ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);element.on("input",inputCheckValue);if(!isReadonly){element.on("focus",function(ev){$mdUtil.nextTick(function(){containerCtrl.setFocused(true)})}).on("blur",function(ev){$mdUtil.nextTick(function(){containerCtrl.setFocused(false);inputCheckValue()})})}scope.$on("$destroy",function(){containerCtrl.setFocused(false);containerCtrl.setHasValue(false);containerCtrl.input=null});function ngModelPipelineCheckValue(arg){containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));return arg}function setupAttributeWatchers(){if(containerCtrl.label){attr.$observe("required",function(value){containerCtrl.label.toggleClass("md-required",value&&!mdNoAsterisk)})}}function inputCheckValue(){containerCtrl.setHasValue(element.val().length>0||(element[0].validity||{}).badInput)}function setupTextarea(){var isAutogrowing=!attr.hasOwnProperty("mdNoAutogrow");attachResizeHandle();if(!isAutogrowing)return;var minRows=attr.hasOwnProperty("rows")?parseInt(attr.rows):NaN;var maxRows=attr.hasOwnProperty("maxRows")?parseInt(attr.maxRows):NaN;var scopeResizeListener=scope.$on("md-resize-textarea",growTextarea);var lineHeight=null;var node=element[0];$timeout(function(){$mdUtil.nextTick(growTextarea)},10,false);element.on("input",growTextarea);if(hasNgModel){ngModelCtrl.$formatters.push(formattersListener)}if(!minRows){element.attr("rows",1)}angular.element($window).on("resize",growTextarea);scope.$on("$destroy",disableAutogrow);function growTextarea(){element.attr("rows",1).css("height","auto").addClass("md-no-flex");var height=getHeight();if(!lineHeight){var originalPadding=element[0].style.padding||"";lineHeight=element.css("padding",0).prop("offsetHeight");element[0].style.padding=originalPadding}if(minRows&&lineHeight){height=Math.max(height,lineHeight*minRows)}if(maxRows&&lineHeight){var maxHeight=lineHeight*maxRows;if(maxHeight<height){element.attr("md-no-autogrow","");height=maxHeight}else{element.removeAttr("md-no-autogrow")}}if(lineHeight){element.attr("rows",Math.round(height/lineHeight))}element.css("height",height+"px").removeClass("md-no-flex")}function getHeight(){var offsetHeight=node.offsetHeight;var line=node.scrollHeight-offsetHeight;return offsetHeight+Math.max(line,0)}function formattersListener(value){$mdUtil.nextTick(growTextarea);return value}function disableAutogrow(){if(!isAutogrowing)return;isAutogrowing=false;angular.element($window).off("resize",growTextarea);scopeResizeListener&&scopeResizeListener();element.attr("md-no-autogrow","").off("input",growTextarea);if(hasNgModel){var listenerIndex=ngModelCtrl.$formatters.indexOf(formattersListener);if(listenerIndex>-1){ngModelCtrl.$formatters.splice(listenerIndex,1)}}}function attachResizeHandle(){if(attr.hasOwnProperty("mdNoResize"))return;var handle=angular.element('<div class="md-resize-handle"></div>');var isDragging=false;var dragStart=null;var startHeight=0;var container=containerCtrl.element;var dragGestureHandler=$mdGesture.register(handle,"drag",{horizontal:false});element.wrap('<div class="md-resize-wrapper">').after(handle);handle.on("mousedown",onMouseDown);container.on("$md.dragstart",onDragStart).on("$md.drag",onDrag).on("$md.dragend",onDragEnd);scope.$on("$destroy",function(){handle.off("mousedown",onMouseDown).remove();container.off("$md.dragstart",onDragStart).off("$md.drag",onDrag).off("$md.dragend",onDragEnd);dragGestureHandler();handle=null;container=null;dragGestureHandler=null});function onMouseDown(ev){ev.preventDefault();isDragging=true;dragStart=ev.clientY;startHeight=parseFloat(element.css("height"))||element.prop("offsetHeight")}function onDragStart(ev){if(!isDragging)return;ev.preventDefault();disableAutogrow();container.addClass("md-input-resized")}function onDrag(ev){if(!isDragging)return;element.css("height",startHeight+(ev.pointer.y-dragStart)-$mdUtil.scrollTop()+"px")}function onDragEnd(ev){if(!isDragging)return;isDragging=false;container.removeClass("md-input-resized")}}if(attr.hasOwnProperty("mdDetectHidden")){var handleHiddenChange=function(){var wasHidden=false;return function(){var isHidden=node.offsetHeight===0;if(isHidden===false&&wasHidden===true){growTextarea()}wasHidden=isHidden}}();scope.$watch(function(){$mdUtil.nextTick(handleHiddenChange,false);return true})}}}}function mdMaxlengthDirective($animate,$mdUtil){return{restrict:"A",require:["ngModel","^mdInputContainer"],link:postLink};function postLink(scope,element,attr,ctrls){var maxlength;var ngModelCtrl=ctrls[0];var containerCtrl=ctrls[1];var charCountEl,errorsSpacer;$mdUtil.nextTick(function(){errorsSpacer=angular.element(containerCtrl.element[0].querySelector(".md-errors-spacer"));charCountEl=angular.element('<div class="md-char-counter">');errorsSpacer.append(charCountEl);attr.$set("ngTrim","false");ngModelCtrl.$formatters.push(renderCharCount);ngModelCtrl.$viewChangeListeners.push(renderCharCount);element.on("input keydown keyup",function(){renderCharCount()});scope.$watch(attr.mdMaxlength,function(value){maxlength=value;if(angular.isNumber(value)&&value>0){if(!charCountEl.parent().length){$animate.enter(charCountEl,errorsSpacer)}renderCharCount()}else{$animate.leave(charCountEl)}});ngModelCtrl.$validators["md-maxlength"]=function(modelValue,viewValue){if(!angular.isNumber(maxlength)||maxlength<0){return true}return(modelValue||element.val()||viewValue||"").length<=maxlength}});function renderCharCount(value){if(!charCountEl.parent){return value}charCountEl.text(String(element.val()||value||"").length+" / "+maxlength);return value}}}function placeholderDirective($compile){return{restrict:"A",require:"^^?mdInputContainer",priority:200,link:{pre:preLink}};function preLink(scope,element,attr,inputContainer){if(!inputContainer)return;var label=inputContainer.element.find("label");var noFloat=inputContainer.element.attr("md-no-float");if(label&&label.length||noFloat===""||scope.$eval(noFloat)){inputContainer.setHasPlaceholder(true);return}if(element[0].nodeName!="MD-SELECT"){var newLabel=angular.element('<label ng-click="delegateClick()" tabindex="-1">'+attr.placeholder+"</label>");attr.$set("placeholder",null);inputContainer.element.addClass("md-icon-float").prepend(newLabel);$compile(newLabel)(scope)}}}function mdSelectOnFocusDirective($timeout){return{restrict:"A",link:postLink};function postLink(scope,element,attr){if(element[0].nodeName!=="INPUT"&&element[0].nodeName!=="TEXTAREA")return;var preventMouseUp=false;element.on("focus",onFocus).on("mouseup",onMouseUp);scope.$on("$destroy",function(){element.off("focus",onFocus).off("mouseup",onMouseUp)});function onFocus(){preventMouseUp=true;$timeout(function(){element[0].select();preventMouseUp=false},1,false)}function onMouseUp(event){if(preventMouseUp){event.preventDefault()}}}}var visibilityDirectives=["ngIf","ngShow","ngHide","ngSwitchWhen","ngSwitchDefault"];function ngMessagesDirective(){return{restrict:"EA",link:postLink,require:"^^?mdInputContainer"};function postLink(scope,element,attrs,inputContainer){if(!inputContainer)return;element.toggleClass("md-input-messages-animation",true);element.toggleClass("md-auto-hide",true);if(attrs.mdAutoHide=="false"||hasVisibiltyDirective(attrs)){element.toggleClass("md-auto-hide",false)}}function hasVisibiltyDirective(attrs){return visibilityDirectives.some(function(attr){return attrs[attr]})}}function ngMessageDirective($mdUtil){return{restrict:"EA",compile:compile,priority:100};function compile(tElement){if(!isInsideInputContainer(tElement)){if(isInsideFragment()){return function(scope,element){if(isInsideInputContainer(element)){initMessageElement(tElement)}}}}else{initMessageElement(tElement)}function isInsideFragment(){var nextNode=tElement[0];while(nextNode=nextNode.parentNode){if(nextNode.nodeType===Node.DOCUMENT_FRAGMENT_NODE){return true}}return false}function isInsideInputContainer(element){return!!$mdUtil.getClosest(element,"md-input-container")}function initMessageElement(element){element.toggleClass("md-input-message-animation",true)}}}var $$AnimateRunner,$animateCss,$mdUtil;function mdInputInvalidMessagesAnimation($$AnimateRunner,$animateCss,$mdUtil){saveSharedServices($$AnimateRunner,$animateCss,$mdUtil);return{addClass:function(element,className,done){showInputMessages(element,done)}}}function ngMessagesAnimation($$AnimateRunner,$animateCss,$mdUtil){saveSharedServices($$AnimateRunner,$animateCss,$mdUtil);return{enter:function(element,done){showInputMessages(element,done)},leave:function(element,done){hideInputMessages(element,done)},addClass:function(element,className,done){if(className=="ng-hide"){hideInputMessages(element,done)}else{done()}},removeClass:function(element,className,done){if(className=="ng-hide"){showInputMessages(element,done)}else{done()}}}}function ngMessageAnimation($$AnimateRunner,$animateCss,$mdUtil){saveSharedServices($$AnimateRunner,$animateCss,$mdUtil);return{enter:function(element,done){var animator=showMessage(element);animator.start().done(done)},leave:function(element,done){var animator=hideMessage(element);animator.start().done(done)}}}function showInputMessages(element,done){var animators=[],animator;var messages=getMessagesElement(element);angular.forEach(messages.children(),function(child){animator=showMessage(angular.element(child));animators.push(animator.start())});$$AnimateRunner.all(animators,done)}function hideInputMessages(element,done){var animators=[],animator;var messages=getMessagesElement(element);angular.forEach(messages.children(),function(child){animator=hideMessage(angular.element(child));animators.push(animator.start())});$$AnimateRunner.all(animators,done)}function showMessage(element){var height=parseInt(window.getComputedStyle(element[0]).height);var topMargin=parseInt(window.getComputedStyle(element[0]).marginTop);var messages=getMessagesElement(element);var container=getInputElement(element);var alreadyVisible=topMargin>-height;if(alreadyVisible||messages.hasClass("md-auto-hide")&&!container.hasClass("md-input-invalid")){return $animateCss(element,{})}return $animateCss(element,{event:"enter",structural:true,from:{opacity:0,"margin-top":-height+"px"},to:{opacity:1,"margin-top":"0"},duration:.3})}function hideMessage(element){var height=element[0].offsetHeight;var styles=window.getComputedStyle(element[0]);if(styles.opacity==0){return $animateCss(element,{})}return $animateCss(element,{event:"leave",structural:true,from:{opacity:1,"margin-top":0},to:{opacity:0,"margin-top":-height+"px"},duration:.3})}function getInputElement(element){var inputContainer=element.controller("mdInputContainer");return inputContainer.element}function getMessagesElement(element){if(element.hasClass("md-input-message-animation")){return angular.element($mdUtil.getClosest(element,function(node){return node.classList.contains("md-input-messages-animation")}))}return angular.element(element[0].querySelector(".md-input-messages-animation"))}function saveSharedServices(_$$AnimateRunner_,_$animateCss_,_$mdUtil_){$$AnimateRunner=_$$AnimateRunner_;$animateCss=_$animateCss_;$mdUtil=_$mdUtil_}})(window,window.angular);