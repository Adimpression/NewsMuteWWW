(function(window,angular,undefined){"use strict";angular.module("material.components.chips",["material.core","material.components.autocomplete"]);MdChipCtrl.$inject=["$scope","$element","$mdConstant","$timeout","$mdUtil"];angular.module("material.components.chips").controller("MdChipCtrl",MdChipCtrl);function MdChipCtrl($scope,$element,$mdConstant,$timeout,$mdUtil){this.$scope=$scope;this.$element=$element;this.$mdConstant=$mdConstant;this.$timeout=$timeout;this.$mdUtil=$mdUtil;this.isEditting=false;this.parentController=undefined;this.enableChipEdit=false}MdChipCtrl.prototype.init=function(controller){this.parentController=controller;this.enableChipEdit=this.parentController.enableChipEdit;if(this.enableChipEdit){this.$element.on("keydown",this.chipKeyDown.bind(this));this.$element.on("mousedown",this.chipMouseDown.bind(this));this.getChipContent().addClass("_md-chip-content-edit-is-enabled")}};MdChipCtrl.prototype.getChipContent=function(){var chipContents=this.$element[0].getElementsByClassName("md-chip-content");return angular.element(chipContents[0])};MdChipCtrl.prototype.getContentElement=function(){return angular.element(this.getChipContent().children()[0])};MdChipCtrl.prototype.getChipIndex=function(){return parseInt(this.$element.attr("index"))};MdChipCtrl.prototype.goOutOfEditMode=function(){if(!this.isEditting)return;this.isEditting=false;this.$element.removeClass("_md-chip-editing");this.getChipContent()[0].contentEditable="false";var chipIndex=this.getChipIndex();var content=this.getContentElement().text();if(content){this.parentController.updateChipContents(chipIndex,this.getContentElement().text());this.$mdUtil.nextTick(function(){if(this.parentController.selectedChip===chipIndex){this.parentController.focusChip(chipIndex)}}.bind(this))}else{this.parentController.removeChipAndFocusInput(chipIndex)}};MdChipCtrl.prototype.selectNodeContents=function(node){var range,selection;if(document.body.createTextRange){range=document.body.createTextRange();range.moveToElementText(node);range.select()}else if(window.getSelection){selection=window.getSelection();range=document.createRange();range.selectNodeContents(node);selection.removeAllRanges();selection.addRange(range)}};MdChipCtrl.prototype.goInEditMode=function(){this.isEditting=true;this.$element.addClass("_md-chip-editing");this.getChipContent()[0].contentEditable="true";this.getChipContent().on("blur",function(){this.goOutOfEditMode()}.bind(this));this.selectNodeContents(this.getChipContent()[0])};MdChipCtrl.prototype.chipKeyDown=function(event){if(!this.isEditting&&(event.keyCode===this.$mdConstant.KEY_CODE.ENTER||event.keyCode===this.$mdConstant.KEY_CODE.SPACE)){event.preventDefault();this.goInEditMode()}else if(this.isEditting&&event.keyCode===this.$mdConstant.KEY_CODE.ENTER){event.preventDefault();this.goOutOfEditMode()}};MdChipCtrl.prototype.chipMouseDown=function(){if(this.getChipIndex()==this.parentController.selectedChip&&this.enableChipEdit&&!this.isEditting){this.goInEditMode()}};MdChip.$inject=["$mdTheming","$mdUtil"];angular.module("material.components.chips").directive("mdChip",MdChip);var DELETE_HINT_TEMPLATE='    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';function MdChip($mdTheming,$mdUtil){var hintTemplate=$mdUtil.processTemplate(DELETE_HINT_TEMPLATE);return{restrict:"E",require:["^?mdChips","mdChip"],compile:compile,controller:"MdChipCtrl"};function compile(element,attr){element.append($mdUtil.processTemplate(hintTemplate));return function postLink(scope,element,attr,ctrls){var chipsController=ctrls.shift();var chipController=ctrls.shift();$mdTheming(element);if(chipsController){chipController.init(chipsController);angular.element(element[0].querySelector(".md-chip-content")).on("blur",function(){chipsController.resetSelectedChip();chipsController.$scope.$applyAsync()})}}}}MdChipRemove.$inject=["$timeout"];angular.module("material.components.chips").directive("mdChipRemove",MdChipRemove);function MdChipRemove($timeout){return{restrict:"A",require:"^mdChips",scope:false,link:postLink};function postLink(scope,element,attr,ctrl){element.on("click",function(event){scope.$apply(function(){ctrl.removeChip(scope.$$replacedScope.$index)})});$timeout(function(){element.attr({tabindex:-1,"aria-hidden":true});element.find("button").attr("tabindex","-1")})}}MdChipTransclude.$inject=["$compile"];angular.module("material.components.chips").directive("mdChipTransclude",MdChipTransclude);function MdChipTransclude($compile){return{restrict:"EA",terminal:true,link:link,scope:false};function link(scope,element,attr){var ctrl=scope.$parent.$mdChipsCtrl,newScope=ctrl.parent.$new(false,ctrl.parent);newScope.$$replacedScope=scope;newScope.$chip=scope.$chip;newScope.$index=scope.$index;newScope.$mdChipsCtrl=ctrl;var newHtml=ctrl.$scope.$eval(attr.mdChipTransclude);element.html(newHtml);$compile(element.contents())(newScope)}}MdChipsCtrl.$inject=["$scope","$attrs","$mdConstant","$log","$element","$timeout","$mdUtil"];angular.module("material.components.chips").controller("MdChipsCtrl",MdChipsCtrl);function MdChipsCtrl($scope,$attrs,$mdConstant,$log,$element,$timeout,$mdUtil){this.$timeout=$timeout;this.$mdConstant=$mdConstant;this.$scope=$scope;this.parent=$scope.$parent;this.$log=$log;this.$element=$element;this.ngModelCtrl=null;this.userInputNgModelCtrl=null;this.autocompleteCtrl=null;this.userInputElement=null;this.items=[];this.selectedChip=-1;this.enableChipEdit=$mdUtil.parseAttributeBoolean($attrs.mdEnableChipEdit);this.addOnBlur=$mdUtil.parseAttributeBoolean($attrs.mdAddOnBlur);this.deleteHint="Press delete to remove this chip.";this.deleteButtonLabel="Remove";this.chipBuffer="";this.useTransformChip=false;this.useOnAdd=false;this.useOnRemove=false}MdChipsCtrl.prototype.inputKeydown=function(event){var chipBuffer=this.getChipBuffer();if(this.autocompleteCtrl&&event.isDefaultPrevented&&event.isDefaultPrevented()){return}if(event.keyCode===this.$mdConstant.KEY_CODE.BACKSPACE){if(this.getCursorPosition(event.target)!==0){return}event.preventDefault();event.stopPropagation();if(this.items.length){this.selectAndFocusChipSafe(this.items.length-1)}return}if(!this.separatorKeys||this.separatorKeys.length<1){this.separatorKeys=[this.$mdConstant.KEY_CODE.ENTER]}if(this.separatorKeys.indexOf(event.keyCode)!==-1){if(this.autocompleteCtrl&&this.requireMatch||!chipBuffer)return;event.preventDefault();if(this.hasMaxChipsReached())return;this.appendChip(chipBuffer.trim());this.resetChipBuffer()}};MdChipsCtrl.prototype.getCursorPosition=function(element){try{if(element.selectionStart===element.selectionEnd){return element.selectionStart}}catch(e){if(!element.value){return 0}}};MdChipsCtrl.prototype.updateChipContents=function(chipIndex,chipContents){if(chipIndex>=0&&chipIndex<this.items.length){this.items[chipIndex]=chipContents;this.ngModelCtrl.$setDirty()}};MdChipsCtrl.prototype.isEditingChip=function(){return!!this.$element[0].getElementsByClassName("_md-chip-editing").length};MdChipsCtrl.prototype.isRemovable=function(){if(!this.ngModelCtrl){return false}return this.readonly?this.removable:angular.isDefined(this.removable)?this.removable:true};MdChipsCtrl.prototype.chipKeydown=function(event){if(this.getChipBuffer())return;if(this.isEditingChip())return;switch(event.keyCode){case this.$mdConstant.KEY_CODE.BACKSPACE:case this.$mdConstant.KEY_CODE.DELETE:if(this.selectedChip<0)return;event.preventDefault();if(!this.isRemovable())return;this.removeAndSelectAdjacentChip(this.selectedChip);break;case this.$mdConstant.KEY_CODE.LEFT_ARROW:event.preventDefault();if(this.selectedChip<0)this.selectedChip=this.items.length;if(this.items.length)this.selectAndFocusChipSafe(this.selectedChip-1);break;case this.$mdConstant.KEY_CODE.RIGHT_ARROW:event.preventDefault();this.selectAndFocusChipSafe(this.selectedChip+1);break;case this.$mdConstant.KEY_CODE.ESCAPE:case this.$mdConstant.KEY_CODE.TAB:if(this.selectedChip<0)return;event.preventDefault();this.onFocus();break}};MdChipsCtrl.prototype.getPlaceholder=function(){var useSecondary=this.items&&this.items.length&&(this.secondaryPlaceholder==""||this.secondaryPlaceholder);return useSecondary?this.secondaryPlaceholder:this.placeholder};MdChipsCtrl.prototype.removeAndSelectAdjacentChip=function(index){var selIndex=this.getAdjacentChipIndex(index);this.removeChip(index);this.$timeout(angular.bind(this,function(){this.selectAndFocusChipSafe(selIndex)}))};MdChipsCtrl.prototype.resetSelectedChip=function(){this.selectedChip=-1};MdChipsCtrl.prototype.getAdjacentChipIndex=function(index){var len=this.items.length-1;return len==0?-1:index==len?index-1:index};MdChipsCtrl.prototype.appendChip=function(newChip){if(this.useTransformChip&&this.transformChip){var transformedChip=this.transformChip({$chip:newChip});if(angular.isDefined(transformedChip)){newChip=transformedChip}}if(angular.isObject(newChip)){var identical=this.items.some(function(item){return angular.equals(newChip,item)});if(identical)return}if(newChip==null||this.items.indexOf(newChip)+1)return;var index=this.items.push(newChip);this.ngModelCtrl.$setDirty();this.validateModel();if(this.useOnAdd&&this.onAdd){this.onAdd({$chip:newChip,$index:index})}};MdChipsCtrl.prototype.useTransformChipExpression=function(){this.useTransformChip=true};MdChipsCtrl.prototype.useOnAddExpression=function(){this.useOnAdd=true};MdChipsCtrl.prototype.useOnRemoveExpression=function(){this.useOnRemove=true};MdChipsCtrl.prototype.useOnSelectExpression=function(){this.useOnSelect=true};MdChipsCtrl.prototype.getChipBuffer=function(){return!this.userInputElement?this.chipBuffer:this.userInputNgModelCtrl?this.userInputNgModelCtrl.$viewValue:this.userInputElement[0].value};MdChipsCtrl.prototype.resetChipBuffer=function(){if(this.userInputElement){if(this.userInputNgModelCtrl){this.userInputNgModelCtrl.$setViewValue("");this.userInputNgModelCtrl.$render()}else{this.userInputElement[0].value=""}}else{this.chipBuffer=""}};MdChipsCtrl.prototype.hasMaxChipsReached=function(){if(angular.isString(this.maxChips))this.maxChips=parseInt(this.maxChips,10)||0;return this.maxChips>0&&this.items.length>=this.maxChips};MdChipsCtrl.prototype.validateModel=function(){this.ngModelCtrl.$setValidity("md-max-chips",!this.hasMaxChipsReached())};MdChipsCtrl.prototype.removeChip=function(index){var removed=this.items.splice(index,1);this.ngModelCtrl.$setDirty();this.validateModel();if(removed&&removed.length&&this.useOnRemove&&this.onRemove){this.onRemove({$chip:removed[0],$index:index})}};MdChipsCtrl.prototype.removeChipAndFocusInput=function(index){this.removeChip(index);if(this.autocompleteCtrl){this.autocompleteCtrl.hidden=true;this.$mdUtil.nextTick(this.onFocus.bind(this))}else{this.onFocus()}};MdChipsCtrl.prototype.selectAndFocusChipSafe=function(index){if(!this.items.length){this.selectChip(-1);this.onFocus();return}if(index===this.items.length)return this.onFocus();index=Math.max(index,0);index=Math.min(index,this.items.length-1);this.selectChip(index);this.focusChip(index)};MdChipsCtrl.prototype.selectChip=function(index){if(index>=-1&&index<=this.items.length){this.selectedChip=index;if(this.useOnSelect&&this.onSelect){this.onSelect({$chip:this.items[this.selectedChip]})}}else{this.$log.warn("Selected Chip index out of bounds; ignoring.")}};MdChipsCtrl.prototype.selectAndFocusChip=function(index){this.selectChip(index);if(index!=-1){this.focusChip(index)}};MdChipsCtrl.prototype.focusChip=function(index){this.$element[0].querySelector('md-chip[index="'+index+'"] .md-chip-content').focus()};MdChipsCtrl.prototype.configureNgModel=function(ngModelCtrl){this.ngModelCtrl=ngModelCtrl;var self=this;ngModelCtrl.$render=function(){self.items=self.ngModelCtrl.$viewValue}};MdChipsCtrl.prototype.onFocus=function(){var input=this.$element[0].querySelector("input");input&&input.focus();this.resetSelectedChip()};MdChipsCtrl.prototype.onInputFocus=function(){this.inputHasFocus=true;this.resetSelectedChip()};MdChipsCtrl.prototype.onInputBlur=function(){this.inputHasFocus=false;var chipBuffer=this.getChipBuffer().trim();this.validateModel();var isModelValid=this.ngModelCtrl.$valid;if(this.userInputNgModelCtrl){isModelValid&=this.userInputNgModelCtrl.$valid}if(this.addOnBlur&&chipBuffer&&isModelValid){this.appendChip(chipBuffer);this.resetChipBuffer()}};MdChipsCtrl.prototype.configureUserInput=function(inputElement){this.userInputElement=inputElement;var ngModelCtrl=inputElement.controller("ngModel");if(ngModelCtrl!=this.ngModelCtrl){this.userInputNgModelCtrl=ngModelCtrl}var scope=this.$scope;var ctrl=this;var scopeApplyFn=function(event,fn){scope.$evalAsync(angular.bind(ctrl,fn,event))};inputElement.attr({tabindex:0}).on("keydown",function(event){scopeApplyFn(event,ctrl.inputKeydown)}).on("focus",function(event){scopeApplyFn(event,ctrl.onInputFocus)}).on("blur",function(event){scopeApplyFn(event,ctrl.onInputBlur)})};MdChipsCtrl.prototype.configureAutocomplete=function(ctrl){if(ctrl){this.autocompleteCtrl=ctrl;ctrl.registerSelectedItemWatcher(angular.bind(this,function(item){if(item){if(this.hasMaxChipsReached())return;this.appendChip(item);this.resetChipBuffer()}}));this.$element.find("input").on("focus",angular.bind(this,this.onInputFocus)).on("blur",angular.bind(this,this.onInputBlur))}};MdChipsCtrl.prototype.hasFocus=function(){return this.inputHasFocus||this.selectedChip>=0};MdChips.$inject=["$mdTheming","$mdUtil","$compile","$log","$timeout","$$mdSvgRegistry"];angular.module("material.components.chips").directive("mdChips",MdChips);var MD_CHIPS_TEMPLATE='      <md-chips-wrap          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus(),                       \'md-readonly\': !$mdChipsCtrl.ngModelCtrl || $mdChipsCtrl.readonly,                      \'md-removable\': $mdChipsCtrl.isRemovable() }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index, \'md-readonly\': !$mdChipsCtrl.ngModelCtrl || $mdChipsCtrl.readonly}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-click="!$mdChipsCtrl.readonly && $mdChipsCtrl.focusChip($index)"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div ng-if="$mdChipsCtrl.isRemovable()"               class="md-chip-remove-container"               md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div class="md-chip-input-container" ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl">          <div md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>';var CHIP_INPUT_TEMPLATE='        <input            class="md-input"            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">';var CHIP_DEFAULT_TEMPLATE="      <span>{{$chip}}</span>";var CHIP_REMOVE_TEMPLATE='      <button          class="md-chip-remove"          ng-if="$mdChipsCtrl.isRemovable()"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-src="{{ $mdChipsCtrl.mdCloseIcon }}"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';function MdChips($mdTheming,$mdUtil,$compile,$log,$timeout,$$mdSvgRegistry){var templates=getTemplates();return{template:function(element,attrs){attrs["$mdUserTemplate"]=element.clone();return templates.chips},require:["mdChips"],restrict:"E",controller:"MdChipsCtrl",controllerAs:"$mdChipsCtrl",bindToController:true,compile:compile,scope:{readonly:"=readonly",removable:"=mdRemovable",placeholder:"@",secondaryPlaceholder:"@",maxChips:"@mdMaxChips",transformChip:"&mdTransformChip",onAppend:"&mdOnAppend",onAdd:"&mdOnAdd",onRemove:"&mdOnRemove",onSelect:"&mdOnSelect",deleteHint:"@",deleteButtonLabel:"@",separatorKeys:"=?mdSeparatorKeys",requireMatch:"=?mdRequireMatch"}};function compile(element,attr){var userTemplate=attr["$mdUserTemplate"];attr["$mdUserTemplate"]=null;var chipTemplate=getTemplateByQuery("md-chips>md-chip-template");var chipRemoveSelector=$mdUtil.prefixer().buildList("md-chip-remove").map(function(attr){return"md-chips>*["+attr+"]"}).join(",");var chipRemoveTemplate=getTemplateByQuery(chipRemoveSelector)||templates.remove,chipContentsTemplate=chipTemplate||templates.default,chipInputTemplate=getTemplateByQuery("md-chips>md-autocomplete")||getTemplateByQuery("md-chips>input")||templates.input,staticChips=userTemplate.find("md-chip");if(userTemplate[0].querySelector("md-chip-template>*[md-chip-remove]")){$log.warn("invalid placement of md-chip-remove within md-chip-template.")}function getTemplateByQuery(query){if(!attr.ngModel)return;var element=userTemplate[0].querySelector(query);return element&&element.outerHTML}return function postLink(scope,element,attrs,controllers){$mdUtil.initOptionalProperties(scope,attr);$mdTheming(element);var mdChipsCtrl=controllers[0];if(chipTemplate){mdChipsCtrl.enableChipEdit=false}mdChipsCtrl.chipContentsTemplate=chipContentsTemplate;mdChipsCtrl.chipRemoveTemplate=chipRemoveTemplate;mdChipsCtrl.chipInputTemplate=chipInputTemplate;mdChipsCtrl.mdCloseIcon=$$mdSvgRegistry.mdClose;element.attr({"aria-hidden":true,tabindex:-1}).on("focus",function(){mdChipsCtrl.onFocus()});if(attr.ngModel){mdChipsCtrl.configureNgModel(element.controller("ngModel"));if(attrs.mdTransformChip)mdChipsCtrl.useTransformChipExpression();if(attrs.mdOnAppend)mdChipsCtrl.useOnAppendExpression();if(attrs.mdOnAdd)mdChipsCtrl.useOnAddExpression();if(attrs.mdOnRemove)mdChipsCtrl.useOnRemoveExpression();if(attrs.mdOnSelect)mdChipsCtrl.useOnSelectExpression();if(chipInputTemplate!=templates.input){scope.$watch("$mdChipsCtrl.readonly",function(readonly){if(!readonly){$mdUtil.nextTick(function(){if(chipInputTemplate.indexOf("<md-autocomplete")===0){var autocompleteEl=element.find("md-autocomplete");mdChipsCtrl.configureAutocomplete(autocompleteEl.controller("mdAutocomplete"))}mdChipsCtrl.configureUserInput(element.find("input"))})}})}$mdUtil.nextTick(function(){var input=element.find("input");input&&input.toggleClass("md-input",true)})}if(staticChips.length>0){var compiledStaticChips=$compile(staticChips.clone())(scope.$parent);$timeout(function(){element.find("md-chips-wrap").prepend(compiledStaticChips)})}}}function getTemplates(){return{chips:$mdUtil.processTemplate(MD_CHIPS_TEMPLATE),input:$mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),"default":$mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),remove:$mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)}}}angular.module("material.components.chips").controller("MdContactChipsCtrl",MdContactChipsCtrl);function MdContactChipsCtrl(){this.selectedItem=null;this.searchText=""}MdContactChipsCtrl.prototype.queryContact=function(searchText){var results=this.contactQuery({$query:searchText});return this.filterSelected?results.filter(angular.bind(this,this.filterSelectedContacts)):results};MdContactChipsCtrl.prototype.itemName=function(item){return item[this.contactName]};MdContactChipsCtrl.prototype.filterSelectedContacts=function(contact){return this.contacts.indexOf(contact)==-1};MdContactChips.$inject=["$mdTheming","$mdUtil"];angular.module("material.components.chips").directive("mdContactChips",MdContactChips);var MD_CONTACT_CHIPS_TEMPLATE='      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.itemName(item)"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}"                  ng-if="item[$mdContactChipsCtrl.contactImage]" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText"                    md-highlight-flags="{{$mdContactChipsCtrl.highlightFlags}}">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}"                  ng-if="$chip[$mdContactChipsCtrl.contactImage]" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';function MdContactChips($mdTheming,$mdUtil){return{template:function(element,attrs){return MD_CONTACT_CHIPS_TEMPLATE},restrict:"E",controller:"MdContactChipsCtrl",controllerAs:"$mdContactChipsCtrl",bindToController:true,compile:compile,scope:{contactQuery:"&mdContacts",placeholder:"@",secondaryPlaceholder:"@",contactName:"@mdContactName",contactImage:"@mdContactImage",contactEmail:"@mdContactEmail",contacts:"=ngModel",requireMatch:"=?mdRequireMatch",highlightFlags:"@?mdHighlightFlags"}};function compile(element,attr){return function postLink(scope,element,attrs,controllers){$mdUtil.initOptionalProperties(scope,attr);$mdTheming(element);element.attr("tabindex","-1")}}}})(window,window.angular);