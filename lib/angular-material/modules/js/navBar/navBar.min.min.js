(function(window,angular,undefined){"use strict";MdNavBarController.$inject=["$element","$scope","$timeout","$mdConstant"];MdNavItem.$inject=["$$rAF"];MdNavItemController.$inject=["$element"];MdNavBar.$inject=["$mdAria","$mdTheming"];angular.module("material.components.navBar",["material.core"]).controller("MdNavBarController",MdNavBarController).directive("mdNavBar",MdNavBar).controller("MdNavItemController",MdNavItemController).directive("mdNavItem",MdNavItem);function MdNavBar($mdAria,$mdTheming){return{restrict:"E",transclude:true,controller:MdNavBarController,controllerAs:"ctrl",bindToController:true,scope:{mdSelectedNavItem:"=?",navBarAriaLabel:"@?"},template:'<div class="md-nav-bar">'+'<nav role="navigation">'+'<ul class="_md-nav-bar-list" ng-transclude role="listbox"'+'tabindex="0"'+'ng-focus="ctrl.onFocus()"'+'ng-blur="ctrl.onBlur()"'+'ng-keydown="ctrl.onKeydown($event)"'+'aria-label="{{ctrl.navBarAriaLabel}}">'+"</ul>"+"</nav>"+"<md-nav-ink-bar></md-nav-ink-bar>"+"</div>",link:function(scope,element,attrs,ctrl){$mdTheming(element);if(!ctrl.navBarAriaLabel){$mdAria.expectAsync(element,"aria-label",angular.noop)}}}}function MdNavBarController($element,$scope,$timeout,$mdConstant){this._$timeout=$timeout;this._$scope=$scope;this._$mdConstant=$mdConstant;this.mdSelectedNavItem;this.navBarAriaLabel;this._navBarEl=$element[0];this._inkbar;var self=this;var deregisterTabWatch=this._$scope.$watch(function(){return self._navBarEl.querySelectorAll("._md-nav-button").length},function(newLength){if(newLength>0){self._initTabs();deregisterTabWatch()}})}MdNavBarController.prototype._initTabs=function(){this._inkbar=angular.element(this._navBarEl.getElementsByTagName("md-nav-ink-bar")[0]);var self=this;this._$timeout(function(){self._updateTabs(self.mdSelectedNavItem,undefined)});this._$scope.$watch("ctrl.mdSelectedNavItem",function(newValue,oldValue){self._$timeout(function(){self._updateTabs(newValue,oldValue)})})};MdNavBarController.prototype._updateTabs=function(newValue,oldValue){var self=this;var tabs=this._getTabs();var oldIndex=-1;var newIndex=-1;var newTab=this._getTabByName(newValue);var oldTab=this._getTabByName(oldValue);if(oldTab){oldTab.setSelected(false);oldIndex=tabs.indexOf(oldTab)}if(newTab){newTab.setSelected(true);newIndex=tabs.indexOf(newTab)}this._$timeout(function(){self._updateInkBarStyles(newTab,newIndex,oldIndex)})};MdNavBarController.prototype._updateInkBarStyles=function(tab,newIndex,oldIndex){this._inkbar.toggleClass("_md-left",newIndex<oldIndex).toggleClass("_md-right",newIndex>oldIndex);this._inkbar.css({display:newIndex<0?"none":""});if(tab){var tabEl=tab.getButtonEl();var left=tabEl.offsetLeft;this._inkbar.css({left:left+"px",width:tabEl.offsetWidth+"px"})}};MdNavBarController.prototype._getTabs=function(){var linkArray=Array.prototype.slice.call(this._navBarEl.querySelectorAll(".md-nav-item"));return linkArray.map(function(el){return angular.element(el).controller("mdNavItem")})};MdNavBarController.prototype._getTabByName=function(name){return this._findTab(function(tab){return tab.getName()==name})};MdNavBarController.prototype._getSelectedTab=function(){return this._findTab(function(tab){return tab.isSelected()})};MdNavBarController.prototype.getFocusedTab=function(){return this._findTab(function(tab){return tab.hasFocus()})};MdNavBarController.prototype._findTab=function(fn){var tabs=this._getTabs();for(var i=0;i<tabs.length;i++){if(fn(tabs[i])){return tabs[i]}}return null};MdNavBarController.prototype.onFocus=function(){var tab=this._getSelectedTab();if(tab){tab.setFocused(true)}};MdNavBarController.prototype.onBlur=function(){var tab=this.getFocusedTab();if(tab){tab.setFocused(false)}};MdNavBarController.prototype._moveFocus=function(oldTab,newTab){oldTab.setFocused(false);newTab.setFocused(true)};MdNavBarController.prototype.onKeydown=function(e){var keyCodes=this._$mdConstant.KEY_CODE;var tabs=this._getTabs();var focusedTab=this.getFocusedTab();if(!focusedTab)return;var focusedTabIndex=tabs.indexOf(focusedTab);switch(e.keyCode){case keyCodes.UP_ARROW:case keyCodes.LEFT_ARROW:if(focusedTabIndex>0){this._moveFocus(focusedTab,tabs[focusedTabIndex-1])}break;case keyCodes.DOWN_ARROW:case keyCodes.RIGHT_ARROW:if(focusedTabIndex<tabs.length-1){this._moveFocus(focusedTab,tabs[focusedTabIndex+1])}break;case keyCodes.SPACE:case keyCodes.ENTER:this._$timeout(function(){focusedTab.getButtonEl().click()});break}};function MdNavItem($$rAF){return{restrict:"E",require:["mdNavItem","^mdNavBar"],controller:MdNavItemController,bindToController:true,controllerAs:"ctrl",replace:true,transclude:true,template:'<li class="md-nav-item" role="option" aria-selected="{{ctrl.isSelected()}}">'+'<md-button ng-if="ctrl.mdNavSref" class="_md-nav-button md-accent"'+'ng-class="ctrl.getNgClassMap()"'+'tabindex="-1"'+'ui-sref="{{ctrl.mdNavSref}}">'+'<span ng-transclude class="_md-nav-button-text"></span>'+"</md-button>"+'<md-button ng-if="ctrl.mdNavHref" class="_md-nav-button md-accent"'+'ng-class="ctrl.getNgClassMap()"'+'tabindex="-1"'+'ng-href="{{ctrl.mdNavHref}}">'+'<span ng-transclude class="_md-nav-button-text"></span>'+"</md-button>"+'<md-button ng-if="ctrl.mdNavClick" class="_md-nav-button md-accent"'+'ng-class="ctrl.getNgClassMap()"'+'tabindex="-1"'+'ng-click="ctrl.mdNavClick()">'+'<span ng-transclude class="_md-nav-button-text"></span>'+"</md-button>"+"</li>",scope:{mdNavClick:"&?",mdNavHref:"@?",mdNavSref:"@?",name:"@"},link:function(scope,element,attrs,controllers){var mdNavItem=controllers[0];var mdNavBar=controllers[1];$$rAF(function(){if(!mdNavItem.name){mdNavItem.name=angular.element(element[0].querySelector("._md-nav-button-text")).text().trim()}var navButton=angular.element(element[0].querySelector("._md-nav-button"));navButton.on("click",function(){mdNavBar.mdSelectedNavItem=mdNavItem.name;scope.$apply()})})}}}function MdNavItemController($element){this._$element=$element;this.mdNavClick;this.mdNavHref;this.name;this._selected=false;this._focused=false;var hasNavClick=!!$element.attr("md-nav-click");var hasNavHref=!!$element.attr("md-nav-href");var hasNavSref=!!$element.attr("md-nav-sref");if((hasNavClick?1:0)+(hasNavHref?1:0)+(hasNavSref?1:0)>1){throw Error("Must specify exactly one of md-nav-click, md-nav-href, "+"md-nav-sref for nav-item directive")}}MdNavItemController.prototype.getNgClassMap=function(){return{"md-active":this._selected,"md-primary":this._selected,"md-unselected":!this._selected,"md-focused":this._focused}};MdNavItemController.prototype.getName=function(){return this.name};MdNavItemController.prototype.getButtonEl=function(){return this._$element[0].querySelector("._md-nav-button")};MdNavItemController.prototype.setSelected=function(isSelected){this._selected=isSelected};MdNavItemController.prototype.isSelected=function(){return this._selected};MdNavItemController.prototype.setFocused=function(isFocused){this._focused=isFocused};MdNavItemController.prototype.hasFocus=function(){return this._focused}})(window,window.angular);